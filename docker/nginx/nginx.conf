worker_processes auto;

events { worker_connections 1024; }

http {
  include       /etc/nginx/mime.types;
  default_type  text/html;
  sendfile on;
  tcp_nopush on;
  keepalive_timeout 65;
  gzip on;

  upstream php {
    server ftxampp_phpfpm:9000;
  }

  server {
    listen 80;
    server_name _;
    root /var/www/html;
    index index.php index.html;

    # --- Startseite -> Dashboard (SPA bevorzugt, sonst PHP) ---
    location = / {
      try_files /_dashboard/dist/index.html /_dashboard/index.php /index.php =404;
    }

    
    # --- Dashboard-Assets (gebautes Vue) ---
    location ^~ /_dashboard/assets/ {
      alias /var/www/html/_dashboard/dist/assets/;
      try_files $uri =404;
      expires 7d;
      add_header Cache-Control "public, max-age=604800, immutable";
    }
	
	# Dashboard zuerst matchen (sonst schnappt der Regex-Block unten)
    location ^~ /_dashboard/ {
      root /var/www/html;
      index index.php index.html;

      # Reihenfolge: echte Datei/Ordner -> dist-Pendant -> SPA-Fallback -> PHP
      try_files
        $uri
        $uri/
        /_dashboard/dist$uri
        /_dashboard/dist$uri/
        /_dashboard/dist/index.html
        /_dashboard/index.php;

      # PHP im Dashboard (API etc.)
      location ~ \.php$ {
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_pass php;
      }
    }



    # --- PHP-Handler: MUSS vor generischen Regex-Locations stehen ---
    location ~ \.php(?:$|/) {
      fastcgi_split_path_info ^(.+?\.php)(/.*)$;
      try_files $fastcgi_script_name =404;

      include fastcgi_params;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      fastcgi_param PATH_INFO       $fastcgi_path_info;
      fastcgi_param QUERY_STRING    $query_string;

      fastcgi_index index.php;
      fastcgi_pass php;
    }

    # --- /foo -> /foo/ (Schönheits-Redirect) ---
    location ~ ^/([^/]+)$ {
      return 302 /$1/;
    }
	
	
    # --- /<proj>/ : sichtbarer Redirect
	location ~ ^/(?<proj>[^/]+)/$ {
	  # 1) Symfony: /foo/ → /foo/public/index.php
	  if (-f $document_root/$proj/public/index.php) {
		return 302 /$proj/public/index.php;
	  }

	  # 2) Vue-Build: /foo/ → /foo/dist/index.html
	  if (-f $document_root/$proj/dist/index.html) {
		return 302 /$proj/dist/index.html;
	  }

	  # 3) Plain PHP: /foo/ → /foo/index.php   (das willst du für /test/)
	  if (-f $document_root/$proj/index.php) {
		return 302 /$proj/index.php;
	  }

	  return 404;
	}

	
	

	# Beliebige Unterpfade: zuerst public/, dann dist/, sonst echte Datei im Projekt
	location ~ ^/([^/]+)/(.*)$ {
	  set $proj $1;
	  set $rest /$2;
	  try_files
		/$proj/public$rest
		/$proj/dist$rest
		/$proj$rest
		=404;
	}


    # Schnellpfad für generische Assets
    location ~* \.(?:css|js|mjs|png|jpg|jpeg|gif|svg|ico|woff2?|ttf|eot)$ {
      expires 7d;
      add_header Cache-Control "public, max-age=604800, immutable";
      try_files $uri =404;
    }

    # Auto-Detect je Projekt:
    #   /<proj>/public      -> Symfony
    #   /<proj>/dist        -> Vue Build
    #   /<proj>/            -> Plain PHP (index.php/html)
    location ~ ^/([^/]+)(/.*)?$ {
      set $proj $1;
      set $rest $2;

      try_files
        /$proj/public$rest
        /$proj/public/index.php$is_args$args
        /$proj/dist$rest
        /$proj/dist/index.html
        /$proj$rest
        /$proj/index.php$is_args$args
        /index.php$is_args$args
		=404;
    }

    # Schutz für versteckte Dateien
    location ~ /\.(?!well-known) {
      deny all;
    }
  }
}
